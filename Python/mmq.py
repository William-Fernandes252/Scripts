# -*- coding: utf-8 -*-
"""MMQ.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3t_BBpNlN6UAE1f-pdSqizOnPi9jl8P
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Função de MMQ
def OLSfit(x, y, dy=None):
    """
    Source: http://www.ap.smu.ca/~agolob/phys2300/blog/climate-change/
    Correction by Sheng: db = np.sqrt(np.sum((x / dy)**2) / denom)
    Original: db = np.sqrt(np.sum(x / dy**2) / denom)
    Find the best fitting parameters of a linear fit to the data through the
    method of ordinary least squares estimation. (i.e. find m and b for
    y = m*x + b)

    Args:
        x: Numpy array of independent variable data
        y: Numpy array of dependent variable data. Must have same size as x.
        dy: Numpy array of dependent variable standard deviations. Must be same
            size as y.

    Returns: A list with four floating point values. [a, da, b, db]
    """
    if dy is None:
        #if no error bars, weight every point the same
        dy = np.ones(x.size)
    denom = np.sum(1 / dy**2) * np.sum((x / dy)**2) - (np.sum(x / dy**2))**2
    a = (np.sum(1 / dy**2) * np.sum(x * y / dy**2) -
         np.sum(x / dy**2) * np.sum(y / dy**2)) / denom
    b = (np.sum(x**2 / dy**2) * np.sum(y / dy**2) -
         np.sum(x / dy**2) * np.sum(x * y / dy**2)) / denom
    da = np.sqrt(np.sum(1 / dy**2) / denom)
    db = np.sqrt(np.sum((x / dy)**2) / denom)
    return([a, da, b, db])

# Os dados
df = pd.DataFrame()

x = np.array([0.023, 0.028, 0.033, 0.038, 0.043, 0.048, 0.053, 0.058, 0.063])
dx = np.array([0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001])
y = np.array([15.7, 14.6, 14.3, 13.5, 12.9, 12.0, 11.4, 9.93, 9.96])
dy = np.array([0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1])

df['x'] = x
df['dx'] = dx
df['y'] = y
df['dy'] = dy

#Visualizar os dados
df

# Determinar os coeficientes angular e linear e suas incertezas
bestfit = OLSfit(x,y,dy)
print(bestfit)
a = bestfit[0]
b = bestfit[2]

# A linha de melhor ajuste
xrange = np.arange(0.9*min(x),1.1*max(x),(1.1*max(x)-min(x))/100)
yfit = a*xrange + b

# Fazer gráfico dos dados com as incertezas
plt.errorbar(x,y,yerr=dy,xerr=dx,fmt='o')
plt.xlabel('x')
plt.ylabel('y')

# Fazer gráfico da linha de melhor ajuste
plt.plot(xrange,yfit,lw=3,color='red')
plt.grid()
plt.title('y vs. x com a linha de melhor ajuste')
plt.show()

